Functions
---------
- When declaring a function in TypeScript
    - It is best practice to type annotate a function's
        - Parameter(s)
        - Return value

    - This provides the benefit of triggering a compilation error
        - When the return value is of different type

    - If a function does NOT return a value
        - Annotate it with the type of "void"

    - To make a parameter variable OPTIONAL
        - Add a "?" right after a parameter variable

    - To assgin a default value for a parameter variable
        - Add a "=" operator
            - Followed by the default value
            - After a parameter variable

        - The compiler will infer the type
            - Based on the default value's type


Syntax:

    function <name>(<parameter>: <data_type>): <return_value_data_type> {
        ...
    }

    // Optional parameter variable
    function <name>(<parameter>[?]: <data_type>): <return_value_data_type> {
        ...
    }

    // Default parameter value
    function <name>(<parameter>[= <default_value>]): <return_value_data_type> {
        ...
    }


- To detect unintended bugs in the TypeScript code
    - Open the file "tsconfig.json"
    
    - NOTE: The following compiler options are NOT part of the "strict" settings

        - Uncomment (i.e. enable) option "noUsedParameters"
            - Triggers a compilation error in the presence of
                - Unused function parameter variable(s)

        - Uncomment (i.e. enable) option "noImplicitReturns"
            - Triggers a compilation error when a function
                - Returns a value of "undefined

            - By default, a JavaScript function implicitly
                - Returns a value of "undefined"

        - Uncomment (i.e. enable) option "noUnusedLocals"
            - Triggers a compilation error when a declared local variable(s)
                - Whose assigned value is NEVER read or used
    